\section{Related Work}
To improve the productivity of FPGA designers, researchers have approached the problem both by increasing the abstraction level and by reducing the compilation time.

In the first case, decades of research in FPGA high-level synthesis have already demonstrated their indispensible role in promoting FPGA design productivity \cite{cong2011high}. Numerous design languages and environments \cite{cardoso2010compiling} have been developed to allow designers to focus on high-level functionality instead of low-level implementation details. 

While high-level abstraction may help a designers express the desired functionality, the low-level compilation time spent on synthesis, map, and place-and-route for FPGAs remains a major hindrances to designs' productivity. Researchers have approached the problem from many angles, such as through the use of pre-compiled hard macros \cite{lavin2011} in the tool flow, the use of a partial reconfiguration, modular design flow \cite{Frangieh2010}, and the use of coarse-grained reconfigurable fabrics upgrading the configurability from bit-level to word-level \cite{coole2010intermediate} \cite{ferreira2011fpga}. 

%Particularly, the authors in \cite{coole2010intermediate} proposed to implement an intermedia fabrics (IF) as an virtual device on top of commerical-off-the-shelf (COTS) FPGA devices. The IF has computational units connected through the connection boxes and switch boxes and it is more like a traditional FPGA with word-level configurability. It hides much of the complexity of fine-grained COTS FPGA device and enables great speedup of the placement and routing as well as portability over different FPGA devices. This method follows traditional FPGA design flow, but the idea building an intermedia virtual fabrics over COTS device to reduce the complexity of FPGA synthesis and mapping is meanlingful. The authors in \cite{ferreira2011fpga} developed a heterogeneous CGRA as IF to further reduce the compilation time and improve the performance at the same time. 

Finally, the use of parameterizable VLIW processor array \cite{kissler2006dynamically} and even the many-core processors \cite{Lebedev2010} as a template to FPGA design has also been proposed demonstrating improve productivity with moderate performance degradation.

Building on top of many of the above ideas, we have opted to utilize a fully synchronous soft coarse-grained reconfigurable array as an intermediate step to compiling high-level compute intensive application. Productivity is improved both from the vastly reduced compilation time, as well as from the high-level abstraction provided by the generic LLVM compiler framework we utilized as front-end.
