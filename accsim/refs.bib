@Article{Li2017survey,
	author="Li, Zhen
	and Wang, Yuqing
	and Zhi, Tian
	and Chen, Tianshi",
	title="A survey of neural network accelerators",
	journal="Frontiers of Computer Science",
	year="2017",
	month="May",
	day="17",
	abstract="Machine-learning techniques have recently been proved to be successful in various domains, especially in emerging commercial applications. As a set of machine-learning techniques, artificial neural networks (ANNs), requiring considerable amount of computation and memory, are one of the most popular algorithms and have been applied in a broad range of applications such as speech recognition, face identification, natural language processing, ect. Conventionally, as a straightforward way, conventional CPUs and GPUs are energy-inefficient due to their excessive effort for flexibility. According to the aforementioned situation, in recent years, many researchers have proposed a number of neural network accelerators to achieve high performance and low power consumption. Thus, the main purpose of this literature is to briefly review recent related works, as well as the DianNao-family accelerators. In summary, this review can serve as a reference for hardware researchers in the area of neural networks.",
	issn="2095-2236",
	doi="10.1007/s11704-016-6159-1",
	url="http://dx.doi.org/10.1007/s11704-016-6159-1"
}

@article{Jouppi2017tpu,
	abstract = {Many architects believe that major improvements in cost-energy-performance must now come from domain-specific hardware. This paper evaluates a custom ASIC—called a ​ Tensor Processing Unit (TPU) ​ — deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN). The heart of the TPU is a 65,536 8-bit MAC matrix multiply unit that offers a peak throughput of 92 TeraOps/second (TOPS) and a large (28 MiB) software-managed on-chip memory. The TPU's deterministic execution model is a better match to the 99th-percentile response-time requirement of our NN applications than are the time-varying optimizations of CPUs and GPUs (caches, out-of-order execution, multithreading, multiprocessing, prefetching, {\ldots}) that help average throughput more than guaranteed latency. The lack of such features helps explain why, despite having myriad MACs and a big memory, the TPU is relatively small and low power. We compare the TPU to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the same datacenters. Our workload, written in the high-level TensorFlow framework, uses production NN applications (MLPs, CNNs, and LSTMs) that represent 95{\%} of our datacenters' NN inference demand. Despite low utilization for some applications, the TPU is on average about 15X -30X faster than its contemporary GPU or CPU, with TOPS/Watt about 30X -80X higher. Moreover, using the GPU's GDDR5 memory in the TPU would triple achieved TOPS and raise TOPS/Watt to nearly 70X the GPU and 200X the CPU. Index terms–DNN, MLP, CNN, RNN, LSTM, neural network, domain-specific architecture, accelerator},
	archivePrefix = {arXiv},
	arxivId = {1704.04760},
	author = {Jouppi, Norman P and Young, Cliff and Patil, Nishant and Patterson, David and Agrawal, Gaurav and Bajwa, Raminder and Bates, Sarah and Bhatia, Suresh and Boden, Nan and Borchers, Al and Boyle, Rick and Cantin, Pierre-Luc and Chao, Clifford and Clark, Chris and Coriell, Jeremy and Daley, Mike and Dau, Matt and Dean, Jeffrey and Gelb, Ben and Ghaemmaghami, Tara Vazir and Gottipati, Rajendra and Gulland, William and Hagmann, Robert and Ho, C Richard and Hogberg, Doug and Hu, John and Hundt, Robert and Hurt, Dan and Ibarz, Julian and Jaffey, Aaron and Jaworski, Alek and Kaplan, Alexander and Khaitan, Harshit and Koch, Andy and Kumar, Naveen and Lacy, Steve and Laudon, James and Law, James and Le, Diemthu and Leary, Chris and Liu, Zhuyuan and Lucke, Kyle and Lundin, Alan and Mackean, Gordon and Maggiore, Adriana and Mahony, Maire and Miller, Kieran and Nagarajan, Rahul and Narayanaswami, Ravi and Ni, Ray and Nix, Kathy and Norrie, Thomas and Omernick, Mark and Penukonda, Narayana and Phelps, Andy and Ross, Jonathan and Ross, Matt and Salek, Amir and Samadiani, Emad and Severn, Chris and Sizikov, Gregory and Snelham, Matthew and Souter, Jed and Steinberg, Dan and Swing, Andy and Tan, Mercedes and Thorson, Gregory and Tian, Bo and Toma, Horia and Tuttle, Erick and Vasudevan, Vijay and Walter, Richard and Wang, Walter and Wilcox, Eric and Yoon, Doe Hyun},
	doi = {10.1145/3079856.3080246},
	eprint = {1704.04760},
	file = {:home/liucheng/gitrepo/papers/norman2017in-datacenter.pdf:pdf},
	isbn = {9781450348928},
	journal = {Isca},
	pages = {1--17},
	title = {{In-Datacenter Performance Analysis of a Tensor Processing Unit​ TM}},
	year = {2017}
}

@article{Wu2014q100,
	abstract = {In this paper, we propose Database Processing Units, or DPUs, a class of domain-specific database processors that can efficiently handle database applications. As a proof of concept, we present the instruction set architecture, microarchitecture, and hardware implementation of one DPU, called Q100. The Q100 has a collection of heterogeneous ASIC tiles that process relational tables and columns quickly and energy-efficiently. The architecture uses coarse grained in- structions that manipulate streams of data, thereby maximizing pipeline and data parallelism, and minimizing the need to time multiplex the accelerator tiles and spill inter- mediate results to memory. This work explores a Q100 de- sign space of 150 configurations, selecting three for further analysis: a small, power-conscious implementation, a high- performance implementation, and a balanced design that maximizes performance per Watt. We then demonstrate that the power-conscious Q100 handles the TPC-H queries with three orders of magnitude less energy than a state of the art software DBMS, while the performance-oriented design out- performs the same DBMS by 70X.},
	author = {Wu, Lisa and Lottarini, Andrea and Paine, Timothy K and Kim, Martha A and Ross, Kenneth A},
	doi = {10.1145/2654822.2541961},
	file = {:home/liucheng/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wu et al. - 2014 - Q100 The Architecture and Design of a Database Processing Unit.pdf:pdf},
	isbn = {9781450323055},
	issn = {0163-5964},
	journal = {SIGARCH Comput. Archit. News},
	keywords = {accelerator,database,dpu,microarchitecture,specialized functional unit,streaming data},
	number = {1},
	pages = {255--268},
	title = {{Q100: The Architecture and Design of a Database Processing Unit}},
	url = {http://doi.acm.org/10.1145/2654822.2541961},
	volume = {42},
	year = {2014}
}


@article{Jun2016graphicionado,
	abstract = {—Graphs are one of the key data structures for many real-world computing applications and the importance of graph analytics is ever-growing. While existing software graph processing frameworks improve programmability of graph analytics, underlying general purpose processors still limit the performance and energy efficiency of graph analytics. We ar-chitect a domain-specific accelerator, Graphicionado, for high-performance, energy-efficient processing of graph analytics work-loads. For efficient graph analytics processing, Graphicionado exploits not only data structure-centric datapath specialization, but also memory subsystem specialization, all the while taking ad-vantage of the parallelism inherent in this domain. Graphicionado augments the vertex programming paradigm, allowing different graph analytics applications to be mapped to the same accelerator framework, while maintaining flexibility through a small set of reconfigurable blocks. This paper describes Graphicionado pipeline design choices in detail and gives insights on how Graphicionado combats application execution inefficiencies on general-purpose CPUs. Our results show that Graphicionado achieves a 1.76 − 6.54× speedup while consuming 50 − 100× less energy compared to a state-of-the-art software graph analytics processing framework executing 32 threads on a 16-core Haswell Xeon processor.},
	author = {Jun, Tae and Lisa, Ham and Narayanan, Wu and Nadathur, Sundaram and Margaret, Satish},
	doi = {10.1109/MICRO.2016.7783759},
	file = {:home/liucheng/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Jun et al. - 2016 - Graphicionado A High-Performance and Energy-Efficient Accelerator for Graph Analytics.pdf:pdf},
	isbn = {9781509035083},
	journal = {49th International Symposium on Microarchitecture},
	mendeley-groups = {Graph Acceleration},
	title = {{Graphicionado : A High-Performance and Energy-Efficient Accelerator for Graph Analytics}},
	volume = {To Appear},
	year = {2016}
}

@article{Ozdal2016energy,
	abstract = {Specialized hardware accelerators can significantly improve the performance and power efficiency of compute systems. In this paper, we focus on hardware accelerators for graph analytics applications and propose a configurable architecture template that is specifically optimized for iterative vertex-centric graph applications with irregular access patterns and asymmetric convergence. The proposed architecture ad-dresses the limitations of the existing multi-core CPU and GPU architectures for these types of applications. The SystemC-based template we provide can be customized easily for different vertex-centric applications by inserting application-level data structures and functions. After that, a cycle-accurate simulator and RTL can be generated to model the target hardware accelerators. In our experiments, we study several graph-parallel applications, and show that the hardware accelerators generated by our template can outperform a 24 core high end server CPU system by up to 3x in terms of performance. We also estimate the area requirement and power consumption of these hardware accelerators through physical-aware logic synthesis, and show up to 65x better power consumption with significantly smaller area. I. INTRODUCTION With the end of Dennard scaling, computing systems are becoming increasingly power limited. New transistor tech-nologies allow packing more logic in a chip, but only a small fraction of available logic can be used at a given time due to power limitations, a phenomenon known as dark silicon. This allows adding custom hardware accelerators targeted for specific tasks and that are significantly more efficient in terms of power and performance. It has been shown that acceler-ator rich architectures can lead to significant improvements through customizations for specific tasks. Another motivation for customization is the increasing prevalence of cloud computing and large server farms that execute a small set of workloads repeatedly. Significant power and performance gains can be achieved by customizing these servers for the frequently executed workloads. Many existing works focus on accelerating compute-intensive tasks using programmable hardware (e.g. GPUs, CPU vector extensions such as SSE and AVX) or custom hardware. A common characteristic of these applications is the regularity and the abundance of data and thread level parallelism. In this paper, we focus on a certain class of graph analytics applications with irregular execution patterns that make them hard to accelerate using existing platforms. Specifically, we focus on iterative graph-parallel applica-tions with asynchronous execution and asymmetric conver-gence. It has been shown in [1] that many graph analytics},
	author = {Ozdal, Muhammet Mustafa and Yesil, Serif and Kim, Taemin and Ayupov, Andrey and Greth, John and Burns, Steven and Ozturk, Ozcan},
	doi = {10.1109/ISCA.2016.24},
	file = {:home/liucheng/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ozdal et al. - 2016 - Energy Efficient Architecture for Graph Analytics Accelerators.pdf:pdf},
	isbn = {9781467389471},
	journal = {Proceedings - 2016 43rd International Symposium on Computer Architecture, ISCA 2016},
	keywords = {Hardware accelerators,architectures for emerging applications,energy efficient architectures,graph analytics},
	pages = {166--177},
	title = {{Energy Efficient Architecture for Graph Analytics Accelerators}},
	year = {2016}
}


